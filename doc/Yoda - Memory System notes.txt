What's implemented now:

  - An image that's about 1.3 MB (and could be shrunk more - see below for a list of Potential Space Optimizations).
  - The whole language, I think.
  - Some primitives (arithmetic, cloning, _Restart, vectors, byteVectors, int32, ...?)
  - A very primitive, inefficient, half-finished, poorly-tested, but somewhat-functional garbage collector - it can do an incremental mark-sweep of oldspace, and there's a scavenger for newspace.

Potential Space Optimizations:

  - Omit the annotation word in each slotDesc.
  - Omit the 'annotation' slot in each map.
  - Omit the nmethodCache word in each map.
  - There are about 2000 outerMethods and 2000 blockMethods. [These numbers may have changed since this was written, of course.] Each one has its own map. In every one of these maps, there is a slotDesc for _codes and one for _literals. All the _codes slotDescs have the same name oop and type oop; only the data oop is different. Ditto for _literals. And in every blockMethodMap there's also a _lexicalParent slotDesc. If we could find a way to avoid all of that duplication, we could save 2 oops for each of those slotDescs, and there are 4000 + 4000 + 2000 = 10000 of those slotDescs, so that's 20 KOops.
  - Encode some information about an object (like its map, or (for objvectors) its indexable origin and indexable size) in the mark.
  - Maybe store block value slots in the actual block, rather than in the map? (That'd eliminate almost all of the blockMaps - right now every block has its own map.)
  - Do Smalltalk-style block inlining. (I think we could inline about half of our blocks.)
  - Break down some modules into finer-grained submodules (because, for example, there's a lot of annotation-related stuff in the 'mirror' module that we don't need if we don't have annotations).

----

Properties we want the GC system to have:

  - something like real-time performance (bounded GC pauses)
  - time-efficient
  - space-efficient
  - be able to move individual objects in and out of flash
  - leave the door open to using the OT in other interesting ways, like objects that aren't on this mote

Let's try a collector with two generations - incremental copying for the new generation, incremental mark/sweep/compact for the old generation. Use an object table (and so chain newly-allocated objects together by allocating an extra word before each one, containing the oop of the previously-allocated object, so that the chain can be used to recycle dead oops after the copying collector finishes). Use a write barrier to make sure that all pointers from old objects to new objects are recorded in the remembered set (card table?), and to make sure that when an oop for an object in fromspace or edenspace is written into an object in oldspace or an already-scanned object in tospace, the fromspace object is moved into tospace.

Think about doing collection work during times when the machine is idle.

Does the hardware have any caches that we should be aware of?
