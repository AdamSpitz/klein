Stuff to do:
  - Turn off the translated vector prims so that the bug goes away for now (hopefully).
  - Clean up some stuff? Maybe try documenting Klein so that other programmers can get into it. That ought to lead to a bunch of cleanups.
  - Fix some stuff:
    - The export cycle time.
    - The debugger taking forever to open up or continue or whatever.
  - Maybe by the time I'm done with those things I'll have some idea of what to do with this stuff:
    - That bug with the hash table (or whatever it might be).
    - The ran-out-of-temp-regs thing.
  - Maybe make it optimize dynamically?
  - Do a post to the Self blog, mentioning some stuff to be done:
    - Porting the assembler and compiler.
    - Traditional C-style compiler optimizations.
    - A more mature GC.
    - Various primitives - graphics, etc.
    - Get rid of OIDs? But we'll need a different way for the remote environment to keep track of stuff.

----

There's gotta be a way to avoid having to pull in the whole object table every time anything changes in it. Why not just pull in the parts we're accessing?

----

Remember to clean up the aaaaa and aaaaaaa things.

----

Fix the compilerTester. Right, right - I broke it, made it require the compilationRequester.

----

Fix the copyright notices!!!

----

Could try manually splitting up the modules that have a lot of uninvoked nmethods, so that they're less coarse-grained.

Submodules I could maybe split off from mirror:

  - DONE: mirrorProgramming
  - annotations?

----

Let's make a faster compiler. (We'll need that anyway.) Hopefully I can just reuse the existing compiler and turn off some stuff:
  - Don't calculateDominance.
  - Don't calculateValueLiveness (but then will I need another register allocator?).

----

In updateLivenessInformation, could I speed things up by representing the sets in a different format?

Same with buildInterferenceInformation?

Hmm, why is canReuseNMethod: taking up so much time?

----

How do I do dynamic optimization?

  - I've got the invocationCount thing. I guess I could hook up something to run right there... but what if it's a leaf nmethod?
  - Maybe during the sendMessage_stub? But then that'll fail if it's being called a lot from a call site that rarely changes targetMap.

How does the Self VM do it?

Hmm, I need way more temp registers. Maybe I need an IR node for the recompilation check?

Seriously, how does the Self VM do it?

----

Not sure what to do. There's a bug where it fails to find a klein locations constant in a dictionary, even though it's actually there. It looks to me like it's in the wrong place - I think the identity hash comes out to 1 (mod 16), but it's actually in position 5 (and there are a couple of emptyMarkers at position 1).

Hmm, has the bug gone away?

Nope. But it seems to be flaky. Blecch.

I think it started when I made the _At: and _At:Put: primitives (and the byteVector ones, too) translate to IR nodes. So maybe I should start by writing a bunch of miniVM tests for those. Be really thorough.

I wrote some tests, they didn't fail. But then I replaced the new translated prims with the old code-generator ones, and the bug went away. (At least, I think it did. The bug seemed to be intermittent, so I can't trust that just because I don't see it now it's actually gone.)

So... now what? If the problem *is* with the translated vector prims, how can I find it?

Hmm, let's look at the IR nodes generated by the prims, and see if there's a way that the register allocator could get screwed up or something if we defer cloning the block.

----

How else could I deal with the uninvoked nmethod problem?

What if I wrote an interpreter? That could at least reduce the amount of stuff that needs to be compiled.

What would I have to do?

  - In the lookup_stub or whatever it is, make it interpret the method instead of compiling it.
  - Write an interpreter.
    - Be able to create a new activation.
    - Make sure that when the interpreter does a send, it's done in such a way that it can run compiled nmethods with no problem. Maybe a _Perform: would do it?
  - Make the debugger smart enough to be able to view interpreted activations. Um... how? I dunno.

Hmm, to create an activation, do I want to do it from scratch, or clone an existing one, or what? Meh, from scratch is probably better, space-wise.

----

Maybe prependACopyOfDeferredComputation: should have some safety checks.

----

On the location-hash bug: OK, seems like the hash is coming back 4 (though I'm not completely sure of that). So if hash: is returning the wrong thing, maybe it's in the "buckets pred &&" part.

----

Hmm. Seems like maybe we're trying to figure out if we canReuseNMethod: the whileFalse: and whileTrue: nmethods (and a few others). Because we're inlining... what?

Wait, are we trying to inline 'value' for a block, in a method on traits block? That's bad, huh? Or is it? No, if the outermost slot is on traits block, it's bad.

----

Hmm, no copyForVM:Oop:IfFail: on a klein mirrors methodActivation. Do I need a different kind of mirror for interpreter activations?
