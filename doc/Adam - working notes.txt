Cleanups to do:

  - Addresses. Factor it all so that I can easily switch to untagged addresses.
  - Factor the layout stuff so that it's a bit more uniform and elegant about handling oops versus addresses. (C is really nice in that way; how close can we get to that?)
  - Stuff that tries to avoid cloning... is there a way to make it clear which stuff that is? Draw a clear fence around it? And avoid duplication with regular stuff? (The problem is that there's some stuff that needs failblocks when running on a remote image, but needs to avoid cloning when running in a local image.)

----

There's gotta be a way to avoid having to pull in the whole object table every time anything changes in it. Why not just pull in the parts we're accessing?

----

Remember to clean up the aaaaa and aaaaaaa things.

----

Fix the compilerTester. Right, right - I broke it, made it require the compilationRequester.

----

Inlining plan:

  - Fix the bug where the source-level UI crashes when inlined blocks are involved. (I've got a klein mirrors blockMethodActivation that gives me an error when I call lexicalParent on it.)
  - Flesh out the list of stuff that needs to be pre-inlined to make the system ramp up quickly enough.

----

Fix the copyright notices!!!

----

Could try manually splitting up the modules that have a lot of uninvoked nmethods, so that they're less coarse-grained.

----

Let's make a faster compiler. (We'll need that anyway.) Hopefully I can just reuse the existing compiler and turn off some stuff:
  - Don't calculateDominance.
  - Don't convertToSSAForm.
  - Don't doInlining.
  - Don't calculateValueLiveness (but then will I need another register allocator?).

OK, I did some of that. Does it work?

----

How do I do PICs?

I guess each one is just an nmethod, created on the fly. Could make them a fixed size and then just fill them up with branches to the sendMessage_stub, so that later we can extend them by overwriting in the middle. But check to see how the Self VM does it.

I could do them statically, too - anytime I see a call to _Eq: I know it's likely to be a boolean, same with sends of && and ||, etc. (But only do this if the optimizationPolicy is to compileFastCode.)

How does the Self VM do it?

  - Looks like every sendDesc has a pic(), which is null if there are 0 or 1 target maps.
  - The PIC is called a CacheStub. Which is a kind of OopNCode. And "OopNCode is the base class of all code containing oop references embedded in the code (e.g. sethi instructions)."
  - Apparently nmethods are a kind of OopNCode too.

OK, so I should make a parent of nmethod called nativeCodeContainingOops. Or maybe just nativeCode.

But I guess I don't really know right now whether a lot of my time is being spent doing polymorphic lookups. Could I get a list of how often the sendMessage_stub is called with each selector? That'd tell me whether I need PICs yet or not.

----

How do I do dynamic optimization?

  - I've got the invocationCount thing. I guess I could hook up something to run right there... but what if it's a leaf nmethod?
  - Maybe during the sendMessage_stub? But then that'll fail if it's being called a lot from a call site that rarely changes targetMap.

How does the Self VM do it?

Hmm, I need way more temp registers. Maybe I need an IR node for the recompilation check?

Seriously, how does the Self VM do it?

----

Submodules I could maybe split off from mirror:

  - DONE: mirrorProgramming
  - annotations?

----

Not sure what to do. There's a bug where it fails to find a klein locations constant in a dictionary, even though it's actually there. It looks to me like it's in the wrong place - I think the identity hash comes out to 1 (mod 16), but it's actually inposition 5 (and there are a couple of emptyMarkers at position 1).
